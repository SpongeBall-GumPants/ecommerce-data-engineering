-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."ADDRESSES"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "ADDRESSES_pkey" PRIMARY KEY (u_id, address)
);

CREATE TABLE IF NOT EXISTS public."AFFILIATE"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    aff_code character(9) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "AFFILIATE_pkey" PRIMARY KEY (u_id),
    CONSTRAINT "CODE" UNIQUE (aff_code)
);

CREATE TABLE IF NOT EXISTS public."CATEGORIES"
(
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    category character varying(31) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "CATEGORIES_pkey" PRIMARY KEY (p_id, category)
);

CREATE TABLE IF NOT EXISTS public."CCARD"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    ccv character(3) COLLATE pg_catalog."default" NOT NULL,
    ccnumber character(16) COLLATE pg_catalog."default" NOT NULL,
    exp_date numeric(4, 2) NOT NULL,
    CONSTRAINT "CCARD_pkey" PRIMARY KEY (u_id, p_id),
    CONSTRAINT "CC_IDS" UNIQUE (u_id, p_id)
);

CREATE TABLE IF NOT EXISTS public."COLLECTION"
(
    shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    product_id character(9) COLLATE pg_catalog."default" NOT NULL,
    collector_id character(9) COLLATE pg_catalog."default" NOT NULL,
    collection_id character(9) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "COLLECTION_pkey" PRIMARY KEY (shop_id, product_id, collector_id, collection_id)
);

CREATE TABLE IF NOT EXISTS public."CUSTOMER"
(
    id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    minit character(1) COLLATE pg_catalog."default",
    lname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    country character varying(60) COLLATE pg_catalog."default" NOT NULL,
    points integer NOT NULL DEFAULT 0,
    phone character(11) COLLATE pg_catalog."default" NOT NULL,
    bdate date NOT NULL,
    sex character(1) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "CUSTOMER_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."LISTS"
(
    shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    product_id character(9) COLLATE pg_catalog."default" NOT NULL,
    buyer_id character(9) COLLATE pg_catalog."default" NOT NULL,
    list_id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character(9) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "LISTS_pkey" PRIMARY KEY (shop_id, product_id, buyer_id, list_id),
    CONSTRAINT "LIST_NAME" UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public."LOGISTICS"
(
    id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    type character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'normal'::character varying,
    premium boolean NOT NULL DEFAULT false,
    CONSTRAINT "LOGISTICS_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."customer_orders"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    log_id character(9) COLLATE pg_catalog."default" NOT NULL,
    sp_id character(9) COLLATE pg_catalog."default" NOT NULL,
    sp_shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    order_id character(9) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    payer_id character(9) COLLATE pg_catalog."default" NOT NULL,
    pay_id character(9) COLLATE pg_catalog."default" NOT NULL,
    pay_amount integer NOT NULL DEFAULT 0,
    refer_id character(9) COLLATE pg_catalog."default",
    coupon character varying(255) COLLATE pg_catalog."default",
    amount integer NOT NULL DEFAULT 1,
    CONSTRAINT "PK" PRIMARY KEY (u_id, log_id, sp_id, sp_shop_id, order_id)
);

CREATE TABLE IF NOT EXISTS public."PAYMENT"
(
    p_u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "PAYMENT_pkey" PRIMARY KEY (p_u_id, p_id)
);

CREATE TABLE IF NOT EXISTS public."PREMIUM"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    s_date date NOT NULL,
    e_date date NOT NULL,
    CONSTRAINT "PREMIUM_pkey" PRIMARY KEY (u_id)
);

CREATE TABLE IF NOT EXISTS public."PRODUCT"
(
    id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    tr_flag boolean NOT NULL DEFAULT false,
    CONSTRAINT "PRODUCT_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."PRODUCT_REVIEW"
(
    shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    product_id character(9) COLLATE pg_catalog."default" NOT NULL,
    reviewer_id character(9) COLLATE pg_catalog."default" NOT NULL,
    review character varying(255) COLLATE pg_catalog."default",
    score numeric(2, 1) NOT NULL DEFAULT 0,
    CONSTRAINT "PRODUCT_REVIEW_pkey" PRIMARY KEY (shop_id, product_id, reviewer_id)
);

CREATE TABLE IF NOT EXISTS public."SHOP"
(
    id character(9) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(127) COLLATE pg_catalog."default" NOT NULL,
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    country character varying(127) COLLATE pg_catalog."default" NOT NULL,
    woman_ent_flag boolean NOT NULL DEFAULT false,
    score numeric(2, 1) NOT NULL DEFAULT 0,
    CONSTRAINT "SHOP_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."SHOP_PRODUCT"
(
    s_id character(9) COLLATE pg_catalog."default" NOT NULL,
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    value integer NOT NULL DEFAULT 0,
    currency character varying(15) COLLATE pg_catalog."default" NOT NULL,
    stock integer NOT NULL DEFAULT 0,
    score numeric(2, 1) NOT NULL DEFAULT 0.0,
    CONSTRAINT "SHOP_PRODUCT_pkey" PRIMARY KEY (s_id, p_id)
);

CREATE TABLE IF NOT EXISTS public."SHOP_REVIEW"
(
    shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    reviewer_id character(9) COLLATE pg_catalog."default" NOT NULL,
    review text COLLATE pg_catalog."default",
    score numeric(2, 1) NOT NULL DEFAULT 0,
    CONSTRAINT "SHOP_REVIEW_pkey" PRIMARY KEY (shop_id, reviewer_id)
);

CREATE TABLE IF NOT EXISTS public."SNA"
(
    shop_id character(9) COLLATE pg_catalog."default" NOT NULL,
    product_id character(9) COLLATE pg_catalog."default" NOT NULL,
    buyer_id character(9) COLLATE pg_catalog."default" NOT NULL,
    setdate date NOT NULL,
    CONSTRAINT "SNA_pkey" PRIMARY KEY (shop_id, product_id, buyer_id)
);

CREATE TABLE IF NOT EXISTS public."TRANSACTION"
(
    w_u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    w_p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    cc_u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    cc_p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    ammount integer NOT NULL DEFAULT 0,
    date date NOT NULL,
    CONSTRAINT "TRANSACTION_pkey" PRIMARY KEY (w_u_id, w_p_id, cc_u_id, cc_p_id),
    CONSTRAINT "TR_IDS" UNIQUE (w_u_id, w_p_id, cc_u_id, cc_p_id)
);

CREATE TABLE IF NOT EXISTS public."VARIANT"
(
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    p_vart_id character(9) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "VARIANT_pkey" PRIMARY KEY (p_id, p_vart_id)
);

CREATE TABLE IF NOT EXISTS public."WALLET"
(
    u_id character(9) COLLATE pg_catalog."default" NOT NULL,
    p_id character(9) COLLATE pg_catalog."default" NOT NULL,
    ammount integer NOT NULL DEFAULT 0,
    currency character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "WALLET_pkey" PRIMARY KEY (u_id, p_id)
);

ALTER TABLE IF EXISTS public."ADDRESSES"
    ADD CONSTRAINT "CUSTOMER_ID" FOREIGN KEY (u_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."AFFILIATE"
    ADD CONSTRAINT "CUSTOMER_ID" FOREIGN KEY (u_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "AFFILIATE_pkey"
    ON public."AFFILIATE"(u_id);


ALTER TABLE IF EXISTS public."CATEGORIES"
    ADD CONSTRAINT "PRODUCT_ID" FOREIGN KEY (p_id)
    REFERENCES public."PRODUCT" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."CCARD"
    ADD CONSTRAINT "PAYMENT" FOREIGN KEY (u_id, p_id)
    REFERENCES public."PAYMENT" (p_u_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "CC_IDS"
    ON public."CCARD"(u_id, p_id);


ALTER TABLE IF EXISTS public."COLLECTION"
    ADD CONSTRAINT "COLLECTOR_AFF" FOREIGN KEY (collector_id)
    REFERENCES public."AFFILIATE" (u_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."COLLECTION"
    ADD CONSTRAINT "SP" FOREIGN KEY (shop_id, product_id)
    REFERENCES public."SHOP_PRODUCT" (s_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."LISTS"
    ADD CONSTRAINT "CUSTOMER" FOREIGN KEY (buyer_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."LISTS"
    ADD CONSTRAINT "SP" FOREIGN KEY (shop_id, product_id)
    REFERENCES public."SHOP_PRODUCT" (s_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "ADDRESS" FOREIGN KEY (address, u_id)
    REFERENCES public."ADDRESSES" (address, u_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "CUSTOMERKEY" FOREIGN KEY (u_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "LOGISTIC_ID" FOREIGN KEY (log_id)
    REFERENCES public."LOGISTICS" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "PAYMENT" FOREIGN KEY (payer_id, pay_id)
    REFERENCES public."PAYMENT" (p_u_id, p_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "REFFERAL" FOREIGN KEY (refer_id)
    REFERENCES public."AFFILIATE" (aff_code) MATCH SIMPLE
    ON UPDATE SET NULL
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public."customer_orders"
    ADD CONSTRAINT "SPID" FOREIGN KEY (sp_id, sp_shop_id)
    REFERENCES public."SHOP_PRODUCT" (p_id, s_id) MATCH FULL
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."PAYMENT"
    ADD CONSTRAINT "USER" FOREIGN KEY (p_u_id)
    REFERENCES public."CUSTOMER" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."PREMIUM"
    ADD CONSTRAINT "CUSTOMER_ID" FOREIGN KEY (u_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "PREMIUM_pkey"
    ON public."PREMIUM"(u_id);


ALTER TABLE IF EXISTS public."PRODUCT_REVIEW"
    ADD CONSTRAINT "REVIEWER" FOREIGN KEY (reviewer_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."PRODUCT_REVIEW"
    ADD CONSTRAINT "SP" FOREIGN KEY (shop_id, product_id)
    REFERENCES public."SHOP_PRODUCT" (s_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SHOP_PRODUCT"
    ADD CONSTRAINT "PRODUCT_ID" FOREIGN KEY (p_id)
    REFERENCES public."PRODUCT" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SHOP_PRODUCT"
    ADD CONSTRAINT "SHOP_ID" FOREIGN KEY (s_id)
    REFERENCES public."SHOP" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SHOP_REVIEW"
    ADD CONSTRAINT "CUSTOMER_ID" FOREIGN KEY (reviewer_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."SHOP_REVIEW"
    ADD CONSTRAINT "SHOP_ID" FOREIGN KEY (shop_id)
    REFERENCES public."SHOP" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."SNA"
    ADD CONSTRAINT "BUYER" FOREIGN KEY (buyer_id)
    REFERENCES public."CUSTOMER" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."SNA"
    ADD CONSTRAINT "SP" FOREIGN KEY (shop_id, product_id)
    REFERENCES public."SHOP_PRODUCT" (s_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."TRANSACTION"
    ADD CONSTRAINT "CC_ID" FOREIGN KEY (cc_u_id, cc_p_id)
    REFERENCES public."CCARD" (u_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."TRANSACTION"
    ADD CONSTRAINT "W_ID" FOREIGN KEY (w_u_id, w_p_id)
    REFERENCES public."WALLET" (u_id, p_id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."VARIANT"
    ADD CONSTRAINT "PRODUCT_ID" FOREIGN KEY (p_id)
    REFERENCES public."PRODUCT" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."VARIANT"
    ADD CONSTRAINT "VARIANT_ID" FOREIGN KEY (p_vart_id)
    REFERENCES public."PRODUCT" (id) MATCH FULL
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."WALLET"
    ADD CONSTRAINT "PAYMENT_ID" FOREIGN KEY (u_id, p_id)
    REFERENCES public."PAYMENT" (p_u_id, p_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "WALLET_pkey"
    ON public."WALLET"(u_id, p_id);

END;
